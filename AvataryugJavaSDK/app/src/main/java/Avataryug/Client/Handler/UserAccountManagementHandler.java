package Avataryug.Client.Handler;

import Avataryug.Client.Api.UserAccountManagementApi;
import Avataryug.Client.Model.AddGenericServiceIDRequest;
import Avataryug.Client.Model.AddGenericServiceIDResult;
import Avataryug.Client.Model.ChangePasswordRequest;
import Avataryug.Client.Model.ChangePasswordResult;
import Avataryug.Client.Model.DeleteUserResult;
import Avataryug.Client.Model.GetUserAccountInfoResult;
import Avataryug.Client.Model.GetUserProfileResult;
import Avataryug.Client.Model.LinkAndroidDeviceIDRequest;
import Avataryug.Client.Model.LinkAndroidDeviceIDResult;
import Avataryug.Client.Model.LinkAppleRequest;
import Avataryug.Client.Model.LinkAppleResult;
import Avataryug.Client.Model.LinkCustomIDRequest;
import Avataryug.Client.Model.LinkCustomIDResult;
import Avataryug.Client.Model.LinkFacebookAccountRequest;
import Avataryug.Client.Model.LinkFacebookAccountResult;
import Avataryug.Client.Model.LinkGoogleAccountRequest;
import Avataryug.Client.Model.LinkGoogleAccountResult;
import Avataryug.Client.Model.LinkIOSDeviceIDRequest;
import Avataryug.Client.Model.LinkIOSDeviceIDResult;
import Avataryug.Client.Model.RemoveGenericServiceIDResult;
import Avataryug.Client.Model.UnlinkAndroidDeviceIDResult;
import Avataryug.Client.Model.UnlinkAppleResult;
import Avataryug.Client.Model.UnlinkCustomIDResult;
import Avataryug.Client.Model.UnlinkFacebookAccountResult;
import Avataryug.Client.Model.UnlinkGoogleAccountResult;
import Avataryug.Client.Model.UnlinkIOSDeviceIDResult;
import Avataryug.Client.Model.UpdateDefaultAvatarIDRequest;
import Avataryug.Client.Model.UpdateDefaultAvatarIDResult;
import Avataryug.Client.Model.UpdateUserDemographicsRequest;
import Avataryug.Client.Model.UpdateUserDemographicsResult;
import Avataryug.Client.Model.UpdateUserProjectDisplayNameRequest;
import Avataryug.Client.Model.UpdateUserProjectDisplayNameResult;
import com.android.volley.Response;
import com.android.volley.VolleyError;

/**
 * Warning: Please refrain from modifying or editing these classes as it may potentially result in breaking the SDK functionality.
 * The "UserAccountManagementHandle" class manages user account-related operations through the use of the "Base" class.
 * It provides a variety of functions for tasks such as changing passwords, deleting user accounts, updating user demographics, verifying users with email, and more.
 * These functions utilize the "baseApiCall" instance to make API calls and handle responses and errors through callbacks.
 */
public class UserAccountManagementHandler {
    private Base apiBase;

    public UserAccountManagementHandler(Base apiBase) {
        this.apiBase = apiBase;
    }

    /**
     * Links a custom ID to the user's account.
     * @param listener
     */
    public void linkCustomID(final OnLinkCustomIDResultListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof LinkCustomIDResult) {
                    if (listener != null) {

                        listener.onLinkCustomIDResult((LinkCustomIDResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onError(new Exception("API response is null"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                listener.onError(error);
            }
        });
    }

    /**
     * Define the listener interface for the LinkCustomID method.
     */
    public interface OnLinkCustomIDResultListener {
        void onLinkCustomIDResult(LinkCustomIDResult result);

        void onError(Exception error);
    }

    /**
     * Links the custom identifier, generated by the Project, to the user's Avataryug account
     */
    public static class LinkCustomID implements Base {
        public String customID;
        public boolean forceLink;

        public LinkCustomID(String customID, boolean forceLink) {
            this.customID = customID;
            this.forceLink = forceLink;
        }

        @Override
        public void callApi(OnApiResultListener listener) {
            LinkCustomIDRequest linkCustomIDRequest = new LinkCustomIDRequest();
            linkCustomIDRequest.setCustomID(customID);
            linkCustomIDRequest.setForceLink(forceLink);

            UserAccountManagementApi.linkCustomID(linkCustomIDRequest, new Response.Listener<LinkCustomIDResult>() {
                @Override
                public void onResponse(LinkCustomIDResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });
        }
    }

    /**
     * Unlinks a custom ID from the user's account.
     * @param listener
     */
    public void unlinkCustomID(final OnUnlinkCustomIDListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof UnlinkCustomIDResult) {
                    if (listener != null) {
                        listener.onUnlinkCustomIDResult((UnlinkCustomIDResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onUnlinkCustomIDError(new Exception("Invalid response type"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onUnlinkCustomIDError(error);
                }
            }
        });
    }

    /**
     * Define the listener interface for the UnlinkCustomID method.
     */
    public interface OnUnlinkCustomIDListener {
        void onUnlinkCustomIDResult(UnlinkCustomIDResult result);
        void onUnlinkCustomIDError(Exception error);
    }

    /**
     * Unlinks the related custom identifier from the user's Avataryug account
     */
    public static class UnlinkCustomID implements Base {

        @Override
        public void callApi(final OnApiResultListener listener) {
            UserAccountManagementApi.unlinkCustomID(new Response.Listener<UnlinkCustomIDResult>() {
                @Override
                public void onResponse(UnlinkCustomIDResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });
        }
    }

    /**
     * Links an Android device ID to the user's account.
     * @param listener
     */
    public void linkAndroidDeviceID(final LinkAndroidDeviceIDListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof LinkAndroidDeviceIDResult) {
                    if (listener != null) {
                        listener.onLinkAndroidDeviceIDResult((LinkAndroidDeviceIDResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onLinkAndroidDeviceIDError(new Exception("Invalid response type"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onLinkAndroidDeviceIDError(error);
                }
            }
        });
    }

    /**
     * Define the listener interface for the LinkAndroidDeviceID method.
     */
    public interface LinkAndroidDeviceIDListener {
        void onLinkAndroidDeviceIDResult(LinkAndroidDeviceIDResult result);

        void onLinkAndroidDeviceIDError(Exception error);
    }

    /**
     * Links the Android device identifier to the user's Avataryug account
     */
    public static class LinkAndroidDeviceID implements Base {

        private String androidDeviceID;
        private boolean forceLink;

        public LinkAndroidDeviceID(String androidDeviceID, boolean forceLink) {
            this.androidDeviceID = androidDeviceID;
            this.forceLink = forceLink;
        }

        @Override
        public void callApi(final OnApiResultListener listener) {
            LinkAndroidDeviceIDRequest linkAndroidDeviceIDRequest = new LinkAndroidDeviceIDRequest();
            linkAndroidDeviceIDRequest.setAndroidDeviceID(androidDeviceID);
            linkAndroidDeviceIDRequest.setForceLink(forceLink);
            UserAccountManagementApi.linkAndroidDeviceID(linkAndroidDeviceIDRequest, new Response.Listener<LinkAndroidDeviceIDResult>() {
                @Override
                public void onResponse(LinkAndroidDeviceIDResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });
        }
    }

    /**
     * Unlinks an Android device ID from the user's account.
     * @param listener
     */
    public void unlinkAndroidDeviceID(final UnlinkAndroidDeviceIDListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof UnlinkAndroidDeviceIDResult) {
                    if (listener != null) {
                        listener.onUnlinkAndroidDeviceIDResult((UnlinkAndroidDeviceIDResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onUnlinkAndroidDeviceIDError(new Exception("Invalid response type"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onUnlinkAndroidDeviceIDError(error);
                }
            }
        });
    }

    /**
     * Define the listener interface for the UnlinkAndroidDeviceID method.
     */
    public interface UnlinkAndroidDeviceIDListener {
        void onUnlinkAndroidDeviceIDResult(UnlinkAndroidDeviceIDResult result);

        void onUnlinkAndroidDeviceIDError(Exception error);
    }

    /**
     * Unlinks the related Android device identifier from the user's Avataryug account.
     */
    public static class UnlinkAndroidDeviceID implements Base {
        @Override
        public void callApi(OnApiResultListener listener) {
            UserAccountManagementApi.unlinkAndroidDeviceID(new Response.Listener<UnlinkAndroidDeviceIDResult>() {
                @Override
                public void onResponse(UnlinkAndroidDeviceIDResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });
        }
    }

    /**
     * Links an Apple account to the user's account.
     * @param listener
     */
    public void linkApple(final LinkAppleListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof LinkAppleResult) {
                    if (listener != null) {
                        listener.onLinkAppleResult((LinkAppleResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onLinkAppleError(new Exception("Invalid response type"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onLinkAppleError(error);
                }
            }
        });
    }

    /**
     * Define the listener interface for the LinkApple method.
     */
    public interface LinkAppleListener {
        void onLinkAppleResult(LinkAppleResult result);

        void onLinkAppleError(Exception error);
    }

    /**
     * Links the Apple account associated with the token to the user's Avataryug account.
     */
    public static class LinkApple implements Base {

        private String appleID;
        private boolean forceLink;
        private String identityToken;

        public LinkApple(String appleID, boolean forceLink, String identityToken) {
            this.appleID = appleID;
            this.forceLink = forceLink;
            this.identityToken = identityToken;
        }

        @Override
        public void callApi(final OnApiResultListener listener) {
            LinkAppleRequest linkAppleRequest = new LinkAppleRequest();
            linkAppleRequest.setAppleID(appleID);
            linkAppleRequest.setForceLink(forceLink);
            linkAppleRequest.setIdentityToken(identityToken);
            UserAccountManagementApi.linkApple(linkAppleRequest, new Response.Listener<LinkAppleResult>() {
                @Override
                public void onResponse(LinkAppleResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });
        }
    }

    /**
     * Unlinks an Apple account from the user's account.
     * @param listener
     */
    public void unlinkApple(final UnlinkAppleResultListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof UnlinkAppleResult) {
                    if (listener != null) {
                        listener.onUnlinkAppleResult((UnlinkAppleResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onUnlinkAppleError(new Exception("Invalid response type"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onUnlinkAppleError(error);
                }
            }
        });
    }

    /**
     * Define the listener interface for the UnlinkApple method.
     */
    public interface UnlinkAppleResultListener {
        void onUnlinkAppleResult(UnlinkAppleResult result);

        void onUnlinkAppleError(Exception error);
    }

    /**
     * Unlinks the related Apple account from the user's Avataryug accou
     */
    public static class UnlinkApple implements Base {
        @Override
        public void callApi(final OnApiResultListener listener) {
            UserAccountManagementApi.unlinkApple(new Response.Listener<UnlinkAppleResult>() {
                @Override
                public void onResponse(UnlinkAppleResult response) {
                    listener.onResult(response);
                }

            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });
        }
    }

    /**
     * Links an iOS device ID to the user's account.
     * @param listener
     */
    public void linkIOSDeviceID(final LinkIOSDeviceIDListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof LinkIOSDeviceIDResult) {
                    if (listener != null) {
                        listener.onLinkIOSDeviceIDResult((LinkIOSDeviceIDResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onLinkIOSDeviceIDError(new Exception("Invalid response type"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onLinkIOSDeviceIDError(error);
                }
            }
        });
    }

    /**
     * Define the listener interface for the LinkIOSDeviceID method.
     */
    public interface LinkIOSDeviceIDListener {
        void onLinkIOSDeviceIDResult(LinkIOSDeviceIDResult result);

        void onLinkIOSDeviceIDError(Exception error);
    }

    /**
     * Links the vendor-specific iOS device identifier to the user's Avataryug account.
     */
    public static class LinkIOSDeviceID implements Base {

        private String deviceID;
        private boolean forceLink;

        public LinkIOSDeviceID(String deviceID, boolean forceLink) {
            this.deviceID = deviceID;
            this.forceLink = forceLink;
        }

        @Override
        public void callApi(final OnApiResultListener listener) {
            LinkIOSDeviceIDRequest linkIOSDeviceIDRequest = new LinkIOSDeviceIDRequest();
            linkIOSDeviceIDRequest.setDeviceID(deviceID);
            linkIOSDeviceIDRequest.setForceLink(forceLink);
            UserAccountManagementApi.linkIOSDeviceID(linkIOSDeviceIDRequest, new Response.Listener<LinkIOSDeviceIDResult>() {
                @Override
                public void onResponse(LinkIOSDeviceIDResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });
        }
    }

    /**
     * Unlinks an iOS device ID from the user's account.
     * @param listener
     */
    public void unlinkIOSDeviceID(final UnlinkIOSDeviceIDListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof UnlinkIOSDeviceIDResult) {
                    if (listener != null) {
                        listener.onUnlinkIOSDeviceIDResult((UnlinkIOSDeviceIDResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onUnlinkIOSDeviceIDError(new Exception("Invalid response type"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onUnlinkIOSDeviceIDError(error);
                }
            }
        });
    }

    /**
     * Define the listener interface for the UnlinkIOSDeviceID method.
     */
    public interface UnlinkIOSDeviceIDListener {
        void onUnlinkIOSDeviceIDResult(UnlinkIOSDeviceIDResult result);

        void onUnlinkIOSDeviceIDError(Exception error);
    }

    /**
     * Unlinks the related iOS device identifier from the user's Avataryug accoun
     */
    public static class UnlinkIOSDeviceID implements Base {

        @Override
        public void callApi(final OnApiResultListener listener) {
            UserAccountManagementApi.unlinkIOSDeviceID(new Response.Listener<UnlinkIOSDeviceIDResult>() {
                @Override
                public void onResponse(UnlinkIOSDeviceIDResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }

            });
        }
    }

    /**
     * Links a Google account to the user's account.
     * @param listener
     */
    public void linkGoogleAccount(final LinkGoogleAccountListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof LinkGoogleAccountResult) {
                    if (listener != null) {
                        listener.onLinkGoogleAccountResult((LinkGoogleAccountResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onLinkGoogleAccountError(new Exception("Invalid response type"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onLinkGoogleAccountError(error);
                }
            }
        });
    }

    /**
     * Define the listener interface for the LinkGoogleAccount method.
     */
    public interface LinkGoogleAccountListener {
        void onLinkGoogleAccountResult(LinkGoogleAccountResult result);

        void onLinkGoogleAccountError(Exception error);
    }

    /**
     * Links the currently signed-in user account to their Google account, using their Google account credentials.
     */
    public static class LinkGoogleAccount implements Base {
        private String googleID;
        private String googleServerAuthCode;
        private boolean forceLink;

        public LinkGoogleAccount(String googleID, boolean forceLink, String googleServerAuthCode) {
            this.googleID = googleID;
            this.forceLink = forceLink;
            this.googleServerAuthCode = googleServerAuthCode;
        }

        @Override
        public void callApi(final OnApiResultListener listener) {
            LinkGoogleAccountRequest request = new LinkGoogleAccountRequest();
            request.setGoogleID(googleID);
            request.setGoogleServerAuthCode(googleServerAuthCode);
            request.setForceLink(forceLink);
            UserAccountManagementApi.linkGoogleAccount(request, new Response.Listener<LinkGoogleAccountResult>() {
                @Override
                public void onResponse(LinkGoogleAccountResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });
        }
    }

    /**
     * Unlinks a Google account from the user's account.
     * @param listener
     */
    public void unlinkGoogleAccount(final OnUnlinkGoogleAccountResultListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof UnlinkGoogleAccountResult) {
                    if (listener != null) {
                        listener.onUnlinkGoogleAccountResult((UnlinkGoogleAccountResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onUnlinkGoogleAccountError(new Exception("Invalid response type"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onUnlinkGoogleAccountError(error);
                }
            }
        });
    }

    /**
     * Define the listener interface for the UnlinkGoogleAccount method.
     */
    public interface OnUnlinkGoogleAccountResultListener {
        void onUnlinkGoogleAccountResult(UnlinkGoogleAccountResult result);

        void onUnlinkGoogleAccountError(Exception error);
    }

    /**
     * Unlinks the related Google account from the user's Avataryug accoun
     */
    public static class UnlinkGoogleAccount implements Base {

        @Override
        public void callApi(final OnApiResultListener listener) {
            UserAccountManagementApi.unlinkGoogleAccount(new Response.Listener<UnlinkGoogleAccountResult>() {
                @Override
                public void onResponse(UnlinkGoogleAccountResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });
        }
    }

    /**
     * Links a Facebook account to the user's account.
     * @param listener
     */
    public void linkFacebookAccount(final OnLinkFacebookAccountListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof LinkFacebookAccountResult) {
                    if (listener != null) {
                        listener.onLinkFacebookAccountResult((LinkFacebookAccountResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onLinkFacebookAccountError(new Exception("Invalid response type"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onLinkFacebookAccountError(error);
                }
            }
        });
    }

    /**
     * Define the listener interface for the LinkFacebookAccount method.
     */
    public interface OnLinkFacebookAccountListener {
        void onLinkFacebookAccountResult(LinkFacebookAccountResult result);
        void onLinkFacebookAccountError(Exception error);
    }

    /**
     * Links the Facebook account associated with the provided Facebook access token to the user's Avataryug account
     */
    public static class LinkFacebookAccount implements Base {
        private boolean forceLink;
        private String accessToken;
        private String facebookID;

        public LinkFacebookAccount(String accessToken, boolean forceLink, String facebookID) {
            this.forceLink = forceLink;
            this.accessToken = accessToken;
            this.facebookID = facebookID;
        }

        @Override
        public void callApi(OnApiResultListener listener) {
            LinkFacebookAccountRequest request = new LinkFacebookAccountRequest();
            request.setFacebookID(facebookID);
            request.setAccessToken(accessToken);
            request.setForceLink(forceLink);
            UserAccountManagementApi.linkFacebookAccount(request, new Response.Listener<LinkFacebookAccountResult>() {
                @Override
                public void onResponse(LinkFacebookAccountResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });

        }
    }

    /**
     * Unlinks a Facebook account from the user's account.
     * @param listener
     */
    public void unlinkFacebookAccount(final OnUnlinkFacebookAccountListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof UnlinkFacebookAccountResult) {
                    if (listener != null) {
                        listener.onUnlinkFacebookAccountResult((UnlinkFacebookAccountResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onUnlinkFacebookAccountError(new Exception("Invalid response type"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onUnlinkFacebookAccountError(error);
                }
            }
        });
    }

    /**
     * Define the listener interface for the UnlinkFacebookAccount method.
     */
    public interface OnUnlinkFacebookAccountListener {
        void onUnlinkFacebookAccountResult(UnlinkFacebookAccountResult result);

        void onUnlinkFacebookAccountError(Exception error);
    }

    /**
     * Unlinks the related Facebook account from the user's Avataryug account.
     */
    public static class UnlinkFacebookAccount implements Base {
        @Override
        public void callApi(OnApiResultListener listener) {
            UserAccountManagementApi.unlinkFacebookAccount(new Response.Listener<UnlinkFacebookAccountResult>() {
                @Override
                public void onResponse(UnlinkFacebookAccountResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });
        }
    }

    /**
     * Adds the specified generic service identifier to the user's Avataryug accoun
     * This is designed to allow for a Avataryug ID lookup of any arbitrary service identifier a Project wants to add.
     * This identifier should never be used as authentication credentials, as the intent is that it is easily accessible by other users
     * @param listener
     */
    public void addGenericServiceID(final OnAddGenericServiceIDListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof AddGenericServiceIDResult) {
                    if (listener != null) {
                        listener.onAddGenericServiceIDResult((AddGenericServiceIDResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onAddGenericServiceIDError(new Exception("Invalid response type"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onAddGenericServiceIDError(error);
                }
            }
        });
    }

    /**
     * Define the listener interface for the AddGenericServiceID method
     */
    public interface OnAddGenericServiceIDListener {
        void onAddGenericServiceIDResult(AddGenericServiceIDResult result);

        void onAddGenericServiceIDError(Exception error);
    }

    /**
     *  Adds the specified generic service identifier to the user's Avataryug account.
     *  This is designed to allow for a Avataryug ID lookup of any arbitrary service identifier a Project wants to add.
     *  This identifier should never be used as authentication credentials, as the intent is that it is easily accessible by other us
     */
    public static class AddGenericServiceID implements Base {
        private String genericServiceID;

        public AddGenericServiceID(String genericServiceID) {
            this.genericServiceID = genericServiceID;
        }
        @Override
        public void callApi(OnApiResultListener listener) {
            AddGenericServiceIDRequest request = new AddGenericServiceIDRequest();
            request.setGenericServiceID(genericServiceID);

            UserAccountManagementApi.addGenericServiceID(request, new Response.Listener<AddGenericServiceIDResult>() {
                @Override
                public void onResponse(AddGenericServiceIDResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });
        }
    }

    /**
     * Removes a generic service ID from the user's account.
     * @param listener
     */
    public void removeGenericServiceID(final OnRemoveGenericServiceIDListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof RemoveGenericServiceIDResult) {
                    if (listener != null) {
                        listener.onRemoveGenericServiceIDResult((RemoveGenericServiceIDResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onRemoveGenericServiceIDError(new Exception("Invalid response type"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onRemoveGenericServiceIDError(error);
                }
            }
        });
    }

    /**
     *  Define the listener interface for the RemoveGenericServiceID method
     */
    public interface OnRemoveGenericServiceIDListener {
        void onRemoveGenericServiceIDResult(RemoveGenericServiceIDResult result);
        void onRemoveGenericServiceIDError(Exception error);
    }

    /**
     * Removes the generic service identifier from the user's Avataryug account.
     */
    public static class RemoveGenericServiceID implements Base {
        @Override
        public void callApi(final OnApiResultListener listener) {
            // Use Retrofit to make the API call
            UserAccountManagementApi.removeGenericServiceID(new Response.Listener<RemoveGenericServiceIDResult>() {
                @Override
                public void onResponse(RemoveGenericServiceIDResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });

        }
    }

    /**
     * Updates the display name of the user in the project.
     * @param listener
     */
    public void updateUserProjectDisplayName(final OnUpdateUserProjectDisplayNameListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof UpdateUserProjectDisplayNameResult) {
                    if (listener != null) {
                        listener.onUpdateUserProjectDisplayNameResult((UpdateUserProjectDisplayNameResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onUpdateUserProjectDisplayNameError(new Exception("Invalid response type"));
                    }
                }
            }
            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onUpdateUserProjectDisplayNameError(error);
                }
            }
        });
    }

    /**
     * Define the listener interface for the UpdateUserProjectDisplayName method
     */
    public interface OnUpdateUserProjectDisplayNameListener {
        void onUpdateUserProjectDisplayNameResult(UpdateUserProjectDisplayNameResult result);

        void onUpdateUserProjectDisplayNameError(Exception error);
    }

    /**
     * Updates the display name for the user in the proje
     */
    public static class UpdateUserProjectDisplayName implements Base {
        private String displayName;
        public UpdateUserProjectDisplayName(String displayName) {
            this.displayName = displayName;
        }

        @Override
        public void callApi(OnApiResultListener listener) {
            UpdateUserProjectDisplayNameRequest request = new UpdateUserProjectDisplayNameRequest();
            request.setDisplayName(displayName);
            UserAccountManagementApi.updateUserProjectDisplayName(request, new Response.Listener<UpdateUserProjectDisplayNameResult>() {
                @Override
                public void onResponse(UpdateUserProjectDisplayNameResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });
        }
    }

    /**
     * Retrieves information about the user's account.
     * @param listener
     */
    public void getUserAccountInfo(final OnGetUserAccountInfoListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof GetUserAccountInfoResult) {
                    if (listener != null) {
                        listener.onGetUserAccountInfoResult((GetUserAccountInfoResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onGetUserAccountInfoError(new Exception("Invalid response type"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onGetUserAccountInfoError(error);
                }
            }
        });
    }

    /**
     *  Define the listener interface for the GetUserAccountInfo method
     */
    public interface OnGetUserAccountInfoListener {
        void onGetUserAccountInfoResult(GetUserAccountInfoResult result);
        void onGetUserAccountInfoError(Exception error);
    }

    /**
     *  Retrieves information about the user's account.
     */
    public static class GetUserAccountInfo implements Base {

        @Override
        public void callApi(final OnApiResultListener listener) {
            UserAccountManagementApi.getUserAccountInfo(new Response.Listener<GetUserAccountInfoResult>() {
                @Override
                public void onResponse(GetUserAccountInfoResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });
        }
    }

    /**
     * Add the UpdateUserDemographics method
     * @param listener
     */
    public void updateUserDemographics(final OnUpdateUserDemographicsListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof UpdateUserDemographicsResult) {
                    if (listener != null) {
                        listener.onUpdateUserDemographicsResult((UpdateUserDemographicsResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onUpdateUserDemographicsError(new Exception("Invalid response type"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onUpdateUserDemographicsError(error);
                }
            }
        });
    }

    /**
     * Define the listener interface for the UpdateUserDemographics method
     */
    public interface OnUpdateUserDemographicsListener {
        void onUpdateUserDemographicsResult(UpdateUserDemographicsResult result);

        void onUpdateUserDemographicsError(Exception error);
    }

    /**
     * Updates user demographic information.
     */
    public static class UpdateUserDemographics implements Base {
        private String gender;
        private String ageRange;
        private String race;

        public UpdateUserDemographics(String gender, String ageRange, String race) {
            this.gender = gender;
            this.ageRange = ageRange;
            this.race = race;
        }

        @Override
        public void callApi(final OnApiResultListener listener) {
            UpdateUserDemographicsRequest request = new UpdateUserDemographicsRequest();
            request.setAgeRange(ageRange);
            request.setRace(race);
            request.setGender(gender);

            UserAccountManagementApi.updateUserDemographics(request, new Response.Listener<UpdateUserDemographicsResult>() {
                @Override
                public void onResponse(UpdateUserDemographicsResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });
        }
    }

    /**
     * Retrieves the user's public profile information.
     * @param listener
     */
    public void getUserProfile(final OnGetUserProfileListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof GetUserProfileResult) {
                    if (listener != null) {
                        listener.onGetUserProfileResult((GetUserProfileResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onGetUserProfileError(new Exception("Invalid response type"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onGetUserProfileError(error);
                }
            }
        });
    }

    /**
     *  Define the listener interface for the GetUserProfile method
     */
    public interface OnGetUserProfileListener {
        void onGetUserProfileResult(GetUserProfileResult result);
        void onGetUserProfileError(Exception error);
    }

    /**
     * Retrieves the user's public profile information.
     */
    public static class GetUserProfile implements Base {
        private String userID;

        public GetUserProfile(String userID) {
            this.userID = userID;
        }

        @Override
        public void callApi(final OnApiResultListener listener) {
            UserAccountManagementApi.getUserProfile(userID, new Response.Listener<GetUserProfileResult>() {
                @Override
                public void onResponse(GetUserProfileResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });
        }
    }

    /**
     * Deletes a user account.
     * @param listener
     */
    public void deleteUser(final OnDeleteUserListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof DeleteUserResult) {
                    if (listener != null) {
                        listener.onDeleteUserResult((DeleteUserResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onDeleteUserError(new Exception("Invalid response type"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onDeleteUserError(error);
                }
            }
        });
    }

    /**
     * Define the listener interface for the DeleteUser method
     */
    public interface OnDeleteUserListener {
        void onDeleteUserResult(DeleteUserResult result);

        void onDeleteUserError(Exception error);
    }

    /**
     * Delete User Account from Avataryug platform.
     */
    public static class DeleteUser implements Base {

        @Override
        public void callApi(final OnApiResultListener listener) {
            // Use Retrofit to make the API call
            UserAccountManagementApi.deleteUser(new Response.Listener<DeleteUserResult>() {
                @Override
                public void onResponse(DeleteUserResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });

        }
    }

    /**
     *Updates the default avatar ID for the user.
     * @param listener
     */
    public void updateDefaultAvatarID(final OnUpdateDefaultAvatarIDListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof UpdateDefaultAvatarIDResult) {
                    if (listener != null) {
                        listener.onUpdateDefaultAvatarIDResult((UpdateDefaultAvatarIDResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onUpdateDefaultAvatarIDError(new Exception("Invalid response type"));
                    }
                }
            }
            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onUpdateDefaultAvatarIDError(error);
                }
            }
        });
    }

    /**
     *  Define the listener interface for the UpdateDefaultAvatarID method
     */
    public interface OnUpdateDefaultAvatarIDListener {
        void onUpdateDefaultAvatarIDResult(UpdateDefaultAvatarIDResult result);
        void onUpdateDefaultAvatarIDError(Exception error);
    }

    /**
     * Sets the default avatar ID to users account
     */
    public static class UpdateDefaultAvatarID implements Base {
        private String defualtAvatarID;
        public UpdateDefaultAvatarID(String defualtAvatarID) {
            this.defualtAvatarID = defualtAvatarID;
        }

        @Override
        public void callApi(final OnApiResultListener listener) {
            UpdateDefaultAvatarIDRequest request = new UpdateDefaultAvatarIDRequest();
            request.setDefaultAvatarID(defualtAvatarID);
            UserAccountManagementApi.updateDefaultAvatarID(request, new Response.Listener<UpdateDefaultAvatarIDResult>() {
                @Override
                public void onResponse(UpdateDefaultAvatarIDResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });
        }
    }

    /**
     * Allows users to change their password.
     * @param listener
     */
    public void changePassword(final OnChangePasswordListener listener) {
        apiBase.callApi(new Base.OnApiResultListener() {
            @Override
            public void onResult(Object response) {
                if (response instanceof ChangePasswordResult) {
                    if (listener != null) {
                        listener.onChangePasswordResult((ChangePasswordResult) response);
                    }
                } else {
                    if (listener != null) {
                        listener.onChangePasswordError(new Exception("Invalid response type"));
                    }
                }
            }

            @Override
            public void onError(Exception error) {
                if (listener != null) {
                    listener.onChangePasswordError(error);
                }
            }
        });
    }

    /**
     * Define the listener interface for the ChangePassword method
     */
    public interface OnChangePasswordListener {
        void onChangePasswordResult(ChangePasswordResult result);
        void onChangePasswordError(Exception error);
    }

    /**
     * Allows users to change their password.
     */
    public static class ChangePassword implements Base {
        private String newPassword;
        private String oldPassword;

        public ChangePassword(String newPassword, String oldPassword) {
            this.newPassword = newPassword;
            this.oldPassword = oldPassword;
        }
        @Override
        public void callApi(final OnApiResultListener listener) {
            ChangePasswordRequest request = new ChangePasswordRequest();
            request.setNewPassword(newPassword);
            request.setOldPassword(oldPassword);

            UserAccountManagementApi.changePassword(request, new Response.Listener<ChangePasswordResult>() {
                @Override
                public void onResponse(ChangePasswordResult response) {
                    listener.onResult(response);
                }
            }, new Response.ErrorListener() {
                @Override
                public void onErrorResponse(VolleyError error) {
                    listener.onError(error);
                }
            });
        }
    }
}


